plugins {
    id 'org.springframework.boot' version '2.1.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.7.RELEASE'
}

group 'com.fanglin.dubbo'
version '1.0.0'

apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'

def env = project.hasProperty('env') && project.property("env") == "pro" ? "pro" : "dev"
def jarVersionSuffix = env == "pro" ? "-RELEASE" : "-SNAPSHOT"

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks {
    processResources {
        from("src/main/resources")
        into("$buildDir/resources/main")
        include("application-" + env + ".yml","**/*.xml")
        rename("application-" + env + ".yml", "application.yml")
    }
}

// JVM 版本号要求
sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    swaggerVersion = '2.9.2'
    dubboRegistryNacosVersion = '0.0.1'
    dubboStarterVersion = '0.2.1.RELEASE'
    alibabaDubboVersion = '2.6.6'
    jedisVersion = '2.10.0'
    commonVersion="1.0.0${jarVersionSuffix}"
    logbackEncoder='6.1'
    swaggerVersion = '2.9.2'
}

repositories {
    mavenLocal()
    maven {
        url 'http://maven.aliyun.com/nexus/content/groups/public/'
    }
}

dependencies {
    annotationProcessor "org.projectlombok:lombok"
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    testAnnotationProcessor "org.projectlombok:lombok"
    testAnnotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    testCompileOnly("org.projectlombok:lombok")
    api("org.projectlombok:lombok")

    implementation("io.springfox:springfox-swagger2:${swaggerVersion}")
    implementation("io.springfox:springfox-swagger-ui:${swaggerVersion}")
    implementation("com.alibaba:dubbo-registry-nacos:${dubboRegistryNacosVersion}")
    implementation("com.alibaba.boot:dubbo-spring-boot-starter:${dubboStarterVersion}")
    implementation("com.alibaba:dubbo:${alibabaDubboVersion}")
    implementation("com.fanglin.dubbo:template-api:1.0.0${jarVersionSuffix}") {
        transitive false
    }
    implementation("com.fanglin.common:common:${commonVersion}") {
        transitive false
    }
    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
    }
    implementation("org.springframework.boot:spring-boot-starter-undertow") {
        exclude module: 'undertow-websockets-jsr'
    }
    implementation("redis.clients:jedis:${jedisVersion}")
    implementation("io.netty:netty-all")
}
publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            name = 'local'
            version += jarVersionSuffix
        }
    }
}